{"version":3,"sources":["../../../projects/date-value-accessor/src/lib/date-value-accessor.ts","../../../projects/date-value-accessor/src/lib/date-value-accessor.module.ts","../../../projects/date-value-accessor/src/lib/local-date-value-accessor.ts","../../../projects/date-value-accessor/src/lib/local-date-value-accessor.module.ts"],"names":["DATE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","DateValueAccessor","multi","renderer","elementRef","this","onChange","_","onTouched","prototype","writeValue","value","setProperty","nativeElement","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Directive","args","selector","providers","Renderer2","ElementRef","HostListener","NgModule","declarations","exports","LOCAL_DATE_VALUE_ACCESSOR","LocalDateValueAccessor","_this","onInput","date","selectedDate","Date","getUTCFullYear","getUTCMonth","getUTCDate","utcDate","UTC","getFullYear","getMonth","getDate"],"mappings":"qZAGaA,EAA2B,CACtCC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,gBAwBP,SAAAD,EAAoBE,EAA6BC,GAA7BC,KAAAF,SAAAA,EAA6BE,KAAAD,WAAAA,EAHKC,KAAAC,SAAW,SAACC,KACxCF,KAAAG,UAAY,oBAItCP,EAAAQ,UAAAC,WAAA,SAAWC,GACJA,EAILN,KAAKF,SAASS,YAAYP,KAAKD,WAAWS,cAAe,cAAeF,GAHtEN,KAAKF,SAASS,YAAYP,KAAKD,WAAWS,cAAe,QAAS,OAMtEZ,EAAAQ,UAAAK,iBAAA,SAAiBC,GAA8BV,KAAKC,SAAWS,GAC/Dd,EAAAQ,UAAAO,kBAAA,SAAkBD,GAAwBV,KAAKG,UAAYO,GAE3Dd,EAAAQ,UAAAQ,iBAAA,SAAiBC,GACfb,KAAKF,SAASS,YAAYP,KAAKD,WAAWS,cAAe,WAAYK,6BA7BxEC,EAAAA,UAASC,KAAA,CAAC,CAMTC,SAAU,mBACVC,UAAW,CAAC1B,gDAtBgC2B,EAAAA,iBAA1BC,EAAAA,gDA2BjBC,EAAAA,aAAYL,KAAA,CAAC,QAAS,CAAC,iDACvBK,EAAAA,aAAYL,KAAA,CAAC,OAAQ,aCrBxB,iCAJCM,EAAAA,SAAQN,KAAA,CAAC,CACRO,aAAc,CAAC1B,GACf2B,QAAS,CAAC3B,WCFC4B,EAAiC,CAC5ChC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAA8B,KAC9B5B,OAAO,gBA4BP,SAAA4B,EAAoB3B,EAA6BC,GAAjD,IAAA2B,EAAA1B,KAAoBA,KAAAF,SAAAA,EAA6BE,KAAAD,WAAAA,EAZjDC,KAAAC,SAAgB,aAEsCD,KAAA2B,QAAU,SAACC,GAC/D,IAAIC,EAA4B,KAC5BD,IAEFC,EAAe,IAAIC,KAAKF,EAAKG,iBAAkBH,EAAKI,cAAeJ,EAAKK,eAE1EP,EAAKzB,SAAS4B,IAEU7B,KAAAG,UAAY,oBAItCsB,EAAArB,UAAAC,WAAA,SAAWuB,GAET,IAAMM,EAAgBN,EACpB,IAAIE,KAAKA,KAAKK,IAAIP,EAAKQ,cAAeR,EAAKS,WAAYT,EAAKU,YAC5D,KACFtC,KAAKF,SAASS,YAAYP,KAAKD,WAAWS,cAAe,cAAe0B,IAG1ET,EAAArB,UAAAK,iBAAA,SAAiBC,GAA8BV,KAAKC,SAAWS,GAC/De,EAAArB,UAAAO,kBAAA,SAAkBD,GAAwBV,KAAKG,UAAYO,GAE3De,EAAArB,UAAAQ,iBAAA,SAAiBC,GACfb,KAAKF,SAASS,YAAYP,KAAKD,WAAWS,cAAe,WAAYK,6BAjCxEC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,wBACVC,UAAW,CAACO,gDAjBgCN,EAAAA,iBAA1BC,EAAAA,+CAwBjBC,EAAAA,aAAYL,KAAA,CAAC,QAAS,CAAC,iDAQvBK,EAAAA,aAAYL,KAAA,CAAC,OAAQ,aC1BxB,iCAJCM,EAAAA,SAAQN,KAAA,CAAC,CACRO,aAAc,CAACG,GACfF,QAAS,CAACE","sourcesContent":["import { Directive, ElementRef, HostListener, Renderer2, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const DATE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DateValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a value and listening to changes on a date input element\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsDate>`\n */\n@Directive({\n  // this selector changes the previous behavior silently and might break existing code\n  // selector: 'input[type=date][formControlName],input[type=date][formControl],input[type=date][ngModel]',\n\n  // this selector is an opt-in version\n  // tslint:disable-next-line: directive-selector\n  selector: '[useValueAsDate]',\n  providers: [DATE_VALUE_ACCESSOR]\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class DateValueAccessor implements ControlValueAccessor {\n\n  @HostListener('input', ['$event.target.valueAsDate']) onChange = (_: any) => { };\n  @HostListener('blur', []) onTouched = () => { };\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) { }\n\n  writeValue(value: Date): void {\n    if (!value) {\n      this.renderer.setProperty(this.elementRef.nativeElement, 'value', null);\n      return;\n    }\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', value);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { DateValueAccessor } from './date-value-accessor';\n\n@NgModule({\n  declarations: [DateValueAccessor],\n  exports: [DateValueAccessor]\n})\nexport class DateValueAccessorModule { }\n","import { Directive, ElementRef, HostListener, Renderer2, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const LOCAL_DATE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => LocalDateValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a value and listening to changes on a date input element\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsLocalDate>`\n */\n@Directive({\n  selector: '[useValueAsLocalDate]',\n  providers: [LOCAL_DATE_VALUE_ACCESSOR]\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class LocalDateValueAccessor implements ControlValueAccessor {\n\n  onChange: any = () => {};\n\n  @HostListener('input', ['$event.target.valueAsDate']) onInput = (date: Date) => {\n    let selectedDate: Date | null = null;\n    if (date) {\n      // Create LOCAL Date, time is set to 00:00 in LOCAL time\n      selectedDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());;\n    }\n    this.onChange(selectedDate);\n  }\n  @HostListener('blur', []) onTouched = () => { };\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) { }\n\n  writeValue(date: Date): void {\n    // Create UTC Date, time is set to 00:00 in UTC time\n    const utcDate: Date = date ?\n      new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) :\n      null;\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n\n// Use Local Dates with html input type date\n// https://stackoverflow.com/questions/53032953/what-is-the-correct-way-to-set-and-get-htmlinputelement-valueasdate-using-local\n","import { NgModule } from '@angular/core';\nimport { LocalDateValueAccessor } from './local-date-value-accessor';\n@NgModule({\n  declarations: [LocalDateValueAccessor],\n  exports: [LocalDateValueAccessor]\n})\nexport class LocalDateValueAccessorModule { }\n"]}